<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.mapper.CommunityMapper">
	<select id="getReviewList" resultType="com.project.domain.ReviewVO">
		select a.review_id, a.review_nickname, a.review_content, to_char(a.review_date, 'yy-mm-dd') review_date1, a.review_readnum, b.likes
		from reviews a 
		left join (select review_id_fk, count(user_id_fk) likes from r_likes group by review_id_fk) b
		on a.review_id = b.review_id_fk
		order by review_date desc
	</select>
	
	<select id="getReviewListLatestPaging" parameterType="com.project.domain.PaginationVO" resultType="com.project.domain.ReviewVO">
		select * from
		(select row_number() over(order by a.review_date desc) rn, a.review_id, a.review_nickname, a.review_content, to_char(a.review_date, 'yy-mm-dd') review_date1, a.review_readnum, nvl(b.likes, 0) likes
		from reviews a 
		left join (select review_id_fk, count(user_id_fk) likes from r_likes group by review_id_fk) b
		on a.review_id = b.review_id_fk)
		<![CDATA[where rn > #{start} and rn < #{end}]]>
	</select>
	
	<select id="getReviewListPopularPaging" parameterType="com.project.domain.PaginationVO" resultType="com.project.domain.ReviewVO">
		select * from
		(select rownum rn, a.review_id, a.review_nickname, a.review_content, to_char(a.review_date, 'yy-mm-dd') review_date1, a.review_readnum, nvl(b.likes, 0) likes
		from reviews a 
		left join (select review_id_fk, count(user_id_fk) likes from r_likes group by review_id_fk) b
		on a.review_id = b.review_id_fk
		order by likes desc)
		<![CDATA[where rn > #{start} and rn < #{end}]]>
	</select>
	
	<insert id="insertReview" parameterType="string">
		insert into reviews(review_id, user_id_fk, festival_id_fk, review_nickname, review_content) values(#{uuid}, '1', '1', #{nickname}, #{content})
	</insert>
	
	<select id="getReview" parameterType="string" resultType="com.project.domain.ReviewVO">
		select review_id, review_nickname, review_content, to_char(review_date, 'yy-mm-dd') review_date1, review_readnum 
		from reviews
		where review_id = #{review_id}
	</select>
	
	<update id="updateReviewReadnum" parameterType="string">
		update reviews set review_readnum = review_readnum + 1 where review_id = #{review_id}
	</update>
	
	<select id="getTotalReviewCount" resultType="_int">
		select count(review_id) from reviews
	</select>
	
	<update id="updateReview" parameterType="string">
		update reviews set review_content = #{content} where review_id = #{review_id}
	</update>
	
	<delete id="deleteLikes" parameterType="string">
		delete from r_likes where review_id_fk = #{review_id}
	</delete>
	
	<delete id="deleteReview" parameterType="string">
		delete from reviews where review_id = #{review_id}
	</delete>
	
	<select id="isLiked" parameterType="string" resultType="object">
		select * from r_likes where user_id_fk = #{uid} and review_id_fk = #{review_id}
	</select>
	
	<insert id="pushLike" parameterType="string">
		insert into r_likes values(#{uuid}, #{uid}, #{review_id})
	</insert>
	
	<delete id="pushUnlike" parameterType="string">
		delete from r_likes where review_id_fk = #{review_id} and user_id_fk = #{uid}
	</delete>
	
	
	
	
	
	<select id="getNoticeList" resultType="com.project.domain.NoticeVO">
		select notice_id, notice_nickname, notice_content, to_char(notice_date, 'yy-mm-dd') notice_date1, notice_readnum
		from notices
		order by notice_date desc
	</select>
	
	<select id="getNoticeListPaging" parameterType="com.project.domain.PaginationVO" resultType="com.project.domain.NoticeVO">
		select * from
		(select row_number() over(order by notice_date desc) rn, notice_id, notice_nickname, notice_content, to_char(notice_date, 'yy-mm-dd') notice_date1, notice_readnum
		from notices)
		<![CDATA[where rn > #{start} and rn < #{end}]]>
	</select>
	
	<insert id="insertNotice" parameterType="string">
		insert into notices(notice_id, user_id_fk, notice_nickname, notice_content) values(#{uuid}, '2', #{nickname}, #{content})
	</insert>
	
	<select id="getNotice" parameterType="string" resultType="com.project.domain.NoticeVO">
		select notice_id, notice_nickname, notice_content, to_char(notice_date, 'yy-mm-dd') notice_date1, notice_readnum 
		from notices
		where notice_id = #{notice_id}
	</select>
	
	<update id="updateNoticeReadnum" parameterType="string">
		update notices set notice_readnum = notice_readnum + 1 where notice_id = #{notice_id}
	</update>
	
	<select id="getTotalNoticeCount" resultType="_int">
		select count(notice_id) from notices
	</select>
	
	<update id="updateNotice" parameterType="string">
		update notices set notice_content = #{content} where notice_id = #{notice_id}
	</update>
	
	<delete id="deleteNotice" parameterType="string">
		delete from notices where notice_id = #{notice_id}
	</delete>
</mapper>